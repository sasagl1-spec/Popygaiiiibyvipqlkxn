from .. import loader, utils
from telethon.tl.types import Message
import logging

logger = logging.getLogger(__name__)

@loader.tds
class VipRepeatModuleMod(loader.Module):
    """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å @vipqlkxn"""
    
    strings = {
        "name": "VipRepeat",
        "active": "‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å @vipqlkxn –∞–∫—Ç–∏–≤–Ω–æ!",
        "stopped": "‚ùå –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "status_active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
        "status_inactive": "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "is_active",
                True,
                "–ê–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "prefix",
                "@vipqlkxn",
                "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
                validator=loader.validators.String()
            )
        )
    
    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
    async def vrepeatcmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å @vipqlkxn"""
        self.config["is_active"] = True
        await utils.answer(message, self.strings["active"])
        logger.info("Vip repeat activated")
    
    @loader.command(ru_doc="–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
    async def vstopcmd(self, message: Message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"""
        self.config["is_active"] = False
        await utils.answer(message, self.strings["stopped"])
        logger.info("Vip repeat stopped")
    
    @loader.command(ru_doc="–°—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
    async def vstatuscmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        status = self.strings["status_active"] if self.config["is_active"] else self.strings["status_inactive"]
        await utils.answer(
            message,
            f"üîß –°—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}\n"
            f"‚Ä¢ –ü—Ä–µ—Ñ–∏–∫—Å: {self.config['prefix']}\n"
            f"‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: .vrepeat / .vstop / .vstatus"
        )
    
    @loader.watcher()
    async def command_watcher(self, message: Message):
        """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Å @vipqlkxn"""
        if not self.config["is_active"]:
            return
        
        if not message.text:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @vipqlkxn
        text = message.text.strip()
        if text.startswith(self.config["prefix"]):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                command = text[len(self.config["prefix"]):].strip()
                
                if command:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    await message.respond(command)
                    logger.info(f"Repeated command: {command}")
                    
            except Exception as e:
                logger.error(f"Repeat error: {e}")
    
    @loader.command(ru_doc="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞")
    async def vtestcmd(self, message: Message):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è"""
        await utils.answer(
            message,
            "‚úÖ –ú–æ–¥—É–ª—å VipRepeat —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "@vipqlkxn –ª—é–±–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "–ò –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ!"
        )
